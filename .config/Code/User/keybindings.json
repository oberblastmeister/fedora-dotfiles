[
    // used to test keybindings
    // {
    //     "key": "adsfadf",
    //     "command": "editor.debug.action.toggleInlineBreakpoint",
    // },
    // make agda mode work
    {
        "key": "ctrl+c",
        "when": "agdaMode",
        "command": "-vscode-neovim.send",
    },
    // {
    //     "key": "ctrl+x",
    //     "command": "-editor.action.clipboardCutAction",
    //     "when": "agdaMode"
    // },
    // {
    //     "key": "ctrl+x",
    //     "command": "-vscode-neovim.send",
    //     "when": "editorTextFocus && neovim.ctrlKeysNormal && neovim.init && neovim.mode != 'insert'"
    // },
    // {
    //     "key": "ctrl+x",
    //     "command": "-editor.action.clipboardCutAction",
    // },
    // {
    //     "key": "ctrl+x",
    //     "command": "-vscode-neovim.send"
    // },
    // space mappings
    {
        "command": "vscode-neovim.send",
        // the key sequence to activate the binding
        "key": "space w",
        // don't activate during insert mode
        "when": "editorTextFocus && neovim.mode != insert",
        // the input to send to Neovim
        "args": ":w<CR>",
    },
    {
        "command": "workbench.action.closeEditorsInGroup",
        // the key sequence to activate the binding
        "key": "space q",
        // don't activate during insert mode
        "when": "editorTextFocus && neovim.mode != insert",
    },
    {
        "command": "editor.action.format",
        // the key sequence to activate the binding
        "key": "space =",
        // don't activate during insert mode
        "when": "editorTextFocus && neovim.mode != insert",
    },
    // window mappings
    // {
    //     "command": "vscode-neovim.send",
    //     // the key sequence to activate the binding
    //     "key": "ctrl-l",
    //     // don't activate during insert mode
    //     "when": "editorTextFocus && neovim.mode != insert",
    //     // the input to send to Neovim
    //     "args": "<C-w>l",
    // },
    // {
    //     "command": "vscode-neovim.send",
    //     // the key sequence to activate the binding
    //     "key": "ctrl-h",
    //     // don't activate during insert mode
    //     "when": "editorTextFocus && neovim.mode != insert",
    //     // the input to send to Neovim
    //     "args": "<C-w>h",
    // },
    // {
    //     "command": "vscode-neovim.send",
    //     // the key sequence to activate the binding
    //     "key": "ctrl-k",
    //     // don't activate during insert mode
    //     "when": "editorTextFocus && neovim.mode != insert",
    //     // the input to send to Neovim
    //     "args": "<C-w>k",
    // },
    // {
    //     "command": "vscode-neovim.send",
    //     // the key sequence to activate the binding
    //     "key": "ctrl-j",
    //     // don't activate during insert mode
    //     "when": "editorTextFocus && neovim.mode != insert",
    //     // the input to send to Neovim
    //     "args": "<C-w>j",
    // },
    // {
    //     "command": "workbench.action.toggleSidebarVisibility",
    //     // the key sequence to activate the binding
    //     "key": "ctrl-w p",
    //     // don't activate during insert mode
    //     "when": "editorTextFocus && neovim.mode != insert",
    //     // the input to send to Neovim
    // },
    // other vscode mappings
    {
        "key": "shift+ctrl+e",
        "command": "actions.findWithSelection"
    },
    {
        "key": "ctrl+e",
        "command": "-actions.findWithSelection"
    },
    {
        "key": "ctrl+e",
        "command": "workbench.view.explorer",
        "when": "neovim.mode == normal"
    },
    {
        "key": "shift+ctrl+e",
        "command": "-workbench.view.explorer",
        "when": "neovim.mode == normal"
    },
    {
        "key": "ctrl+l",
        "when": "sideBarFocus",
        "command": "workbench.action.focusActiveEditorGroup"
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+j",
        "command": "-editor.action.insertLineAfter",
        "when": "editorTextFocus && neovim.ctrlKeysInsert && !neovim.recording && neovim.mode == 'insert'"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.terminal.focus",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+k ctrl+i",
        "command": "-editor.action.showHover",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+shift+l",
        "command": "workbench.action.increaseViewSize"
    },
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.decreaseViewSize"
    },
    {
        "key": "ctrl+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "ctrl+t",
        "command": "-vscode-neovim.send",
        "when": "neovim.mode == cmdline_insert || neovim.mode == cmdline_normal || neovim.mode == cmdline_replace"
    },
    {
        "key": "ctrl+t",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysInsert && neovim.recording && neovim.mode == insert"
    },
    {
        "key": "ctrl+t",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    // escape stuff
    // use this to close diagnostic popups
    {
        "key": "ctrl+[",
        "command": "closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible && neovim.mode == normal"
    },
    {
        "key": "ctrl+[",
        "command": "cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
    },
    {
        "key": "ctrl+[",
        "command": "gitlens.key.escape",
        "when": "editorTextFocus && gitlens:key:escape && !findWidgetVisible && !isInEmbeddedEditor && !renameInputVisible && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+[",
        "command": "filesExplorer.cancelCut",
        "when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    // Close reference to escape
    {
        "key": "ctrl+[",
        "command": "closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+[",
        "command": "closeReferenceSearch",
        "when": "referenceSearchVisible && !config.editor.stablePeek"
    },
    {
        "key": "ctrl+[",
        "command": "closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek && neovim.mode == 'normal'"
    },
    {
        "key": "ctrl+[",
        "command": "notifications.hideList",
        "when": "notificationCenterVisible"
    },
    {
        "key": "ctrl+[",
        "command": "workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+[",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
    },
    // cursor stuff
    {
        "key": "ctrl+b",
        "command": "cursorLeft",
        "when": "textInputFocus && neovim.mode == insert"
    },
    {
        "key": "ctrl+f",
        "command": "cursorRight",
        "when": "textInputFocus && neovim.mode == insert"
    },
    {
        "key": "ctrl+e",
        "command": "cursorEnd",
        "when": "textInputFocus && neovim.mode == insert"
    },
    {
        "key": "ctrl+a",
        "command": "cursorHome",
        "when": "textInputFocus && neovim.mode == insert"
    },
    {
        "key": "ctrl+q",
        "command": "-workbench.action.quit"
    },
    {
        "key": "ctrl+q",
        "command": "workbench.action.closeActiveEditor",
        "when": "!editorTextFocus && !filesExplorerFocus && !searchViewletFocus && !terminalFocus"
    },
    {
        "key": "ctrl+w q",
        "command": "-workbench.action.closeActiveEditor",
        "when": "!editorTextFocus && !filesExplorerFocus && !searchViewletFocus && !terminalFocus"
    },
    {
        "key": "tab",
        "command": "extension.vim_tab",
        "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
    },
    {
        "key": "tab",
        "command": "-extension.vim_tab",
        "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "x",
        "command": "magit.discard-at-point",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "k",
        "command": "-magit.discard-at-point"
    },
    {
        "key": "-",
        "command": "magit.reverse-at-point",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "v",
        "command": "-magit.reverse-at-point"
    },
    {
        "key": "shift+-",
        "command": "magit.reverting",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "shift+v",
        "command": "-magit.reverting"
    },
    {
        "key": "shift+o",
        "command": "magit.resetting",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "shift+x",
        "command": "-magit.resetting"
    },
    {
        "key": "x",
        "command": "-magit.reset-mixed"
    },
    {
        "key": "ctrl+u x",
        "command": "-magit.reset-hard"
    },
    {
        "key": "shift+enter",
        "command": "idris2-lsp.repl.eval",
        "when": "editorLangId == 'idris'"
    },
    {
        "key": "ctrl+shift+alt+enter",
        "command": "-idris2-lsp.repl.eval",
        "when": "editorLangId == 'idris'"
    },
    {
        "key": "ctrl+s",
        "command": "paredit.sexpRangeExpansion",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /commonlisp|clojure|scheme|lisp|racket/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+w",
        "command": "-paredit.sexpRangeExpansion",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /commonlisp|clojure|scheme|lisp|racket/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+s",
        "command": "paredit.sexpRangeContraction",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /commonlisp|clojure|scheme|lisp|racket/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+w",
        "command": "-paredit.sexpRangeContraction",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /commonlisp|clojure|scheme|lisp|racket/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+n",
        "command": "vscode-neovim.restart"
    },
    {
        "key": "ctrl+shift+p",
        "command": "-workbench.action.quickOpenNavigatePreviousInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
]
